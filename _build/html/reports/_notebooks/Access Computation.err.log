Traceback (most recent call last):
  File "/usr/local/lib/python3.11/dist-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/usr/local/lib/python3.11/dist-packages/nbclient/client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.11/dist-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.11/asyncio/base_events.py", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.11/dist-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/usr/local/lib/python3.11/dist-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/usr/local/lib/python3.11/dist-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
data = []

# Target geometry

for access_target in access_targets:
    data.append(
        dict(
            type="scattergeo",
            lon=[float(access_target.get_lla(earth).in_degrees())],
            lat=[float(access_target.get_lla(earth).in_degrees())],
            mode="markers",
            marker=dict(size=10, color="orange"),
        )
    )

# Orbit geometry

data.append(
    dict(
        type="scattergeo",
        lon=satellite_orbit_geometry_df["Longitude"],
        lat=satellite_orbit_geometry_df["Latitude"],
        mode="lines",
        line=dict(
            width=1,
            color="rgba(0, 0, 0, 0.1)",
        ),
    )
)

# Access geometry

for access_geometry_df in access_geometry_dfs:
    data.append(
        dict(
            type="scattergeo",
            lon=access_geometry_df["Longitude"],
            lat=access_geometry_df["Latitude"],
            mode="lines",
            line=dict(
                width=1,
                color="red",
            ),
        )
    )

layout = dict(
    title=None,
    showlegend=False,
    width=1200,
    height=600,
    geo=dict(
        showland=True,
        landcolor="rgb(243, 243, 243)",
        countrycolor="rgb(204, 204, 204)",
    ),
)

figure = go.Figure(data=data, layout=layout)

#figure.show("svg")
figure.show()
------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mAttributeError[0m                            Traceback (most recent call last)
Cell [0;32mIn[25], line 9[0m
[1;32m      3[0m [38;5;66;03m# Target geometry[39;00m
[1;32m      5[0m [38;5;28;01mfor[39;00m access_target [38;5;129;01min[39;00m access_targets:
[1;32m      6[0m     data[38;5;241m.[39mappend(
[1;32m      7[0m         [38;5;28mdict[39m(
[1;32m      8[0m             [38;5;28mtype[39m[38;5;241m=[39m[38;5;124m"[39m[38;5;124mscattergeo[39m[38;5;124m"[39m,
[0;32m----> 9[0m             lon[38;5;241m=[39m[[38;5;28mfloat[39m([43maccess_target[49m[38;5;241;43m.[39;49m[43mget_lla[49m[43m([49m[43mearth[49m[43m)[49m[38;5;241;43m.[39;49m[43min_degrees[49m())],
[1;32m     10[0m             lat[38;5;241m=[39m[[38;5;28mfloat[39m(access_target[38;5;241m.[39mget_lla(earth)[38;5;241m.[39min_degrees())],
[1;32m     11[0m             mode[38;5;241m=[39m[38;5;124m"[39m[38;5;124mmarkers[39m[38;5;124m"[39m,
[1;32m     12[0m             marker[38;5;241m=[39m[38;5;28mdict[39m(size[38;5;241m=[39m[38;5;241m10[39m, color[38;5;241m=[39m[38;5;124m"[39m[38;5;124morange[39m[38;5;124m"[39m),
[1;32m     13[0m         )
[1;32m     14[0m     )
[1;32m     16[0m [38;5;66;03m# Orbit geometry[39;00m
[1;32m     18[0m data[38;5;241m.[39mappend(
[1;32m     19[0m     [38;5;28mdict[39m(
[1;32m     20[0m         [38;5;28mtype[39m[38;5;241m=[39m[38;5;124m"[39m[38;5;124mscattergeo[39m[38;5;124m"[39m,
[0;32m   (...)[0m
[1;32m     28[0m     )
[1;32m     29[0m )

[0;31mAttributeError[0m: 'ostk.physics.coordinate.spherical.LLA' object has no attribute 'in_degrees'

