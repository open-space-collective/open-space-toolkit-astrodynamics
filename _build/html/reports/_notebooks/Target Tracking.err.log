Traceback (most recent call last):
  File "/usr/local/lib/python3.11/dist-packages/jupyter_core/utils/__init__.py", line 154, in wrapped
    asyncio.get_running_loop()
RuntimeError: no running event loop

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.11/dist-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/usr/local/lib/python3.11/dist-packages/nbclient/client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.11/dist-packages/jupyter_core/utils/__init__.py", line 158, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.11/asyncio/base_events.py", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.11/dist-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/usr/local/lib/python3.11/dist-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/usr/local/lib/python3.11/dist-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
def reduce_angle(angle):
    # Reduce angle to be within the range 0 to 2*pi
    reduced_angle = float(angle.in_radians()) % (2 * math.pi)

    # If angle is negative, add 2*pi to make it positive
    if reduced_angle < 0:
        reduced_angle += 2 * math.pi

    return Angle.radians(reduced_angle)


def calculate_ypr(state):
    state_vvlh = state.in_frame(vvlh_frame)

    q_B_VVLH = state_vvlh.get_attitude()

    ypr = EulerAngle.quaternion(q_B_VVLH, EulerAngle.AxisSequence.ZYX)

    phi = ypr.phi
    theta = ypr.theta
    psi = ypr.psi

    if phi.in_radians() > MathAngle.half_pi().in_radians():
        phi = reduce_angle(phi + MathAngle.pi())
        theta = reduce_angle(MathAngle.pi() - theta)
        psi = reduce_angle(psi + MathAngle.pi())

    if theta.in_radians() > MathAngle.pi().in_radians():
        theta = theta - Angle.two_pi()

    satellite_lla = LLA.cartesian(
        cartesian_coordinates=state.in_frame(Frame.ITRF())
        .get_position()
        .get_coordinates(),
        ellipsoid_equatorial_radius=earth.get_equatorial_radius(),
        ellipsoid_flattening=earth.get_flattening(),
    )

    return (
        state.get_instant().get_date_time(Scale.UTC),
        float(satellite_lla.get_longitude().in_degrees()),
        float(satellite_lla.get_latitude().in_degrees()),
        float(satellite_lla.get_altitude().in_meters()),
        float(phi.in_degrees()),
        float(theta.in_degrees()),
        float(psi.in_degrees()),
    )


yprs = pd.DataFrame(
    data=[
        calculate_ypr(state)
        for state in profile.get_states_at(
            instants=access.get_interval().generate_grid(Duration.seconds(1.0)),
        )
    ],
    columns=[
        "Timestamp",
        "Longitude [deg]",
        "Latitude [deg]",
        "Altitude [m]",
        "Yaw [deg]",
        "Pitch [deg]",
        "Roll [deg]",
    ],
)

yprs.set_index("Timestamp", inplace=True)

px.line(
    yprs[["Yaw [deg]", "Pitch [deg]", "Roll [deg]"]],
    title="Yaw-Pitch-Roll Evolution",
)
------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mNameError[0m                                 Traceback (most recent call last)
Cell [0;32mIn[9], line 53[0m
[1;32m     31[0m     satellite_lla [38;5;241m=[39m LLA[38;5;241m.[39mcartesian(
[1;32m     32[0m         cartesian_coordinates[38;5;241m=[39mstate[38;5;241m.[39min_frame(Frame[38;5;241m.[39mITRF())
[1;32m     33[0m         [38;5;241m.[39mget_position()
[0;32m   (...)[0m
[1;32m     36[0m         ellipsoid_flattening[38;5;241m=[39mearth[38;5;241m.[39mget_flattening(),
[1;32m     37[0m     )
[1;32m     39[0m     [38;5;28;01mreturn[39;00m (
[1;32m     40[0m         state[38;5;241m.[39mget_instant()[38;5;241m.[39mget_date_time(Scale[38;5;241m.[39mUTC),
[1;32m     41[0m         [38;5;28mfloat[39m(satellite_lla[38;5;241m.[39mget_longitude()[38;5;241m.[39min_degrees()),
[0;32m   (...)[0m
[1;32m     46[0m         [38;5;28mfloat[39m(psi[38;5;241m.[39min_degrees()),
[1;32m     47[0m     )
[1;32m     50[0m yprs [38;5;241m=[39m pd[38;5;241m.[39mDataFrame(
[1;32m     51[0m     data[38;5;241m=[39m[
[1;32m     52[0m         calculate_ypr(state)
[0;32m---> 53[0m         [38;5;28;01mfor[39;00m state [38;5;129;01min[39;00m [43mprofile[49m[38;5;241;43m.[39;49m[43mget_states_at[49m[43m([49m
[1;32m     54[0m [43m            [49m[43minstants[49m[38;5;241;43m=[39;49m[43maccess[49m[38;5;241;43m.[39;49m[43mget_interval[49m[43m([49m[43m)[49m[38;5;241;43m.[39;49m[43mgenerate_grid[49m[43m([49m[43mDuration[49m[38;5;241;43m.[39;49m[43mseconds[49m[43m([49m[38;5;241;43m1.0[39;49m[43m)[49m[43m)[49m[43m,[49m
[1;32m     55[0m [43m        [49m[43m)[49m
[1;32m     56[0m     ],
[1;32m     57[0m     columns[38;5;241m=[39m[
[1;32m     58[0m         [38;5;124m"[39m[38;5;124mTimestamp[39m[38;5;124m"[39m,
[1;32m     59[0m         [38;5;124m"[39m[38;5;124mLongitude [deg][39m[38;5;124m"[39m,
[1;32m     60[0m         [38;5;124m"[39m[38;5;124mLatitude [deg][39m[38;5;124m"[39m,
[1;32m     61[0m         [38;5;124m"[39m[38;5;124mAltitude [m][39m[38;5;124m"[39m,
[1;32m     62[0m         [38;5;124m"[39m[38;5;124mYaw [deg][39m[38;5;124m"[39m,
[1;32m     63[0m         [38;5;124m"[39m[38;5;124mPitch [deg][39m[38;5;124m"[39m,
[1;32m     64[0m         [38;5;124m"[39m[38;5;124mRoll [deg][39m[38;5;124m"[39m,
[1;32m     65[0m     ],
[1;32m     66[0m )
[1;32m     68[0m yprs[38;5;241m.[39mset_index([38;5;124m"[39m[38;5;124mTimestamp[39m[38;5;124m"[39m, inplace[38;5;241m=[39m[38;5;28;01mTrue[39;00m)
[1;32m     70[0m px[38;5;241m.[39mline(
[1;32m     71[0m     yprs[[[38;5;124m"[39m[38;5;124mYaw [deg][39m[38;5;124m"[39m, [38;5;124m"[39m[38;5;124mPitch [deg][39m[38;5;124m"[39m, [38;5;124m"[39m[38;5;124mRoll [deg][39m[38;5;124m"[39m]],
[1;32m     72[0m     title[38;5;241m=[39m[38;5;124m"[39m[38;5;124mYaw-Pitch-Roll Evolution[39m[38;5;124m"[39m,
[1;32m     73[0m )

Cell [0;32mIn[8], line 50[0m, in [0;36mbody_frame_transform_generator[0;34m(instant)[0m
[1;32m     45[0m [38;5;28;01mdef[39;00m[38;5;250m [39m[38;5;21mbody_frame_transform_generator[39m(instant):
[1;32m     46[0m     state [38;5;241m=[39m orbit[38;5;241m.[39mget_state_at(instant)[38;5;241m.[39min_frame(Frame[38;5;241m.[39mGCRF())
[1;32m     48[0m     q_B_GCRF [38;5;241m=[39m calculate_attitude(
[1;32m     49[0m         satellite_state[38;5;241m=[39mstate,
[0;32m---> 50[0m         target_position[38;5;241m=[39m[43mtarget_position[49m,
[1;32m     51[0m     )
[1;32m     53[0m     [38;5;28;01mreturn[39;00m Transform[38;5;241m.[39mactive(
[1;32m     54[0m         instant,
[1;32m     55[0m         [38;5;241m-[39mstate[38;5;241m.[39mget_position()[38;5;241m.[39mget_coordinates(),
[0;32m   (...)[0m
[1;32m     58[0m         np[38;5;241m.[39marray(([38;5;241m0.0[39m, [38;5;241m0.0[39m, [38;5;241m0.0[39m)),
[1;32m     59[0m     )

[0;31mNameError[0m: name 'target_position' is not defined

