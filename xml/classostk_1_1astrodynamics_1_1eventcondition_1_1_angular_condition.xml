<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classostk_1_1astrodynamics_1_1eventcondition_1_1_angular_condition" kind="class" language="C++" prot="public">
    <compoundname>ostk::astrodynamics::eventcondition::AngularCondition</compoundname>
    <basecompoundref refid="classostk_1_1astrodynamics_1_1_event_condition" prot="public" virt="non-virtual">ostk::astrodynamics::EventCondition</basecompoundref>
    <includes refid="_angular_condition_8hpp" local="no">AngularCondition.hpp</includes>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="classostk_1_1astrodynamics_1_1eventcondition_1_1_angular_condition_1aab27c1430469e94751717ae5a625edaa" prot="public" static="no" strong="yes">
        <type></type>
        <name>Criterion</name>
        <enumvalue id="classostk_1_1astrodynamics_1_1eventcondition_1_1_angular_condition_1aab27c1430469e94751717ae5a625edaaa87074e622d8fecce2c96877e39ac8e8a" prot="public">
          <name>AnyCrossing</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classostk_1_1astrodynamics_1_1eventcondition_1_1_angular_condition_1aab27c1430469e94751717ae5a625edaaa35f12699e9d62145f3a7222ef63e496d" prot="public">
          <name>PositiveCrossing</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classostk_1_1astrodynamics_1_1eventcondition_1_1_angular_condition_1aab27c1430469e94751717ae5a625edaaa9b59d568492405fa7baf90ef51c09a2b" prot="public">
          <name>NegativeCrossing</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classostk_1_1astrodynamics_1_1eventcondition_1_1_angular_condition_1aab27c1430469e94751717ae5a625edaaa9d3b7edf5d8e24edd6a44803bd3a7691" prot="public">
          <name>WithinRange</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/Astrodynamics/EventCondition/AngularCondition.hpp" line="34" column="1" bodyfile="include/OpenSpaceToolkit/Astrodynamics/EventCondition/AngularCondition.hpp" bodystart="33" bodyend="39"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classostk_1_1astrodynamics_1_1eventcondition_1_1_angular_condition_1af89972c72eaac01148c9dcbe9e5ac676" prot="private" static="no" mutable="no">
        <type><ref refid="classostk_1_1astrodynamics_1_1eventcondition_1_1_angular_condition_1aab27c1430469e94751717ae5a625edaa" kindref="member">Criterion</ref></type>
        <definition>Criterion ostk::astrodynamics::eventcondition::AngularCondition::criterion_</definition>
        <argsstring></argsstring>
        <name>criterion_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/Astrodynamics/EventCondition/AngularCondition.hpp" line="136" column="15" bodyfile="include/OpenSpaceToolkit/Astrodynamics/EventCondition/AngularCondition.hpp" bodystart="136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classostk_1_1astrodynamics_1_1eventcondition_1_1_angular_condition_1a1baa4282e94bcd37a20f7512058e673c" prot="private" static="no" mutable="no">
        <type>std::function&lt; bool(const Real &amp;, const Real &amp;, const Real &amp;)&gt;</type>
        <definition>std::function&lt;bool(const Real&amp;, const Real&amp;, const Real&amp;)&gt; ostk::astrodynamics::eventcondition::AngularCondition::comparator_</definition>
        <argsstring></argsstring>
        <name>comparator_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/Astrodynamics/EventCondition/AngularCondition.hpp" line="137" column="19" bodyfile="include/OpenSpaceToolkit/Astrodynamics/EventCondition/AngularCondition.hpp" bodystart="137" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classostk_1_1astrodynamics_1_1eventcondition_1_1_angular_condition_1a8ccd04f557d2551f1565369e60a4396e" prot="private" static="no" mutable="no">
        <type>Pair&lt; Real, Real &gt;</type>
        <definition>Pair&lt;Real, Real&gt; ostk::astrodynamics::eventcondition::AngularCondition::targetRange_</definition>
        <argsstring></argsstring>
        <name>targetRange_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/Astrodynamics/EventCondition/AngularCondition.hpp" line="138" column="10" bodyfile="include/OpenSpaceToolkit/Astrodynamics/EventCondition/AngularCondition.hpp" bodystart="138" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classostk_1_1astrodynamics_1_1eventcondition_1_1_angular_condition_1a5f8e01e19f828c3f45c893626a0d8a36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ostk::astrodynamics::eventcondition::AngularCondition::AngularCondition</definition>
        <argsstring>(const String &amp;aName, const Criterion &amp;aCriterion, const std::function&lt; Real(const State &amp;)&gt; &amp;anEvaluator, const Angle &amp;aTargetAngle)</argsstring>
        <name>AngularCondition</name>
        <param>
          <type>const String &amp;</type>
          <declname>aName</declname>
        </param>
        <param>
          <type>const <ref refid="classostk_1_1astrodynamics_1_1eventcondition_1_1_angular_condition_1aab27c1430469e94751717ae5a625edaa" kindref="member">Criterion</ref> &amp;</type>
          <declname>aCriterion</declname>
        </param>
        <param>
          <type>const std::function&lt; Real(const <ref refid="classostk_1_1astrodynamics_1_1trajectory_1_1_state" kindref="compound">State</ref> &amp;)&gt; &amp;</type>
          <declname>anEvaluator</declname>
        </param>
        <param>
          <type>const Angle &amp;</type>
          <declname>aTargetAngle</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="classostk_1_1astrodynamics_1_1eventcondition_1_1_angular_condition_1a5f8e01e19f828c3f45c893626a0d8a36" kindref="member">AngularCondition</ref><sp/>angularCondition<sp/>=<sp/>{aName,<sp/>aCriterion,<sp/>anEvaluator,<sp/>aTargetAngle};</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aName</parametername>
</parameternamelist>
<parameterdescription>
<para>A string representing the name of the Angular Event Condition </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aCriterion</parametername>
</parameternamelist>
<parameterdescription>
<para>An enum indicating the criterion used to determine if the Angular Event Condition is met </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>anEvaluator</parametername>
</parameternamelist>
<parameterdescription>
<para>A function evaluating a state to an angle in radians </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aTargetAngle</parametername>
</parameternamelist>
<parameterdescription>
<para>A target angle </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/Astrodynamics/EventCondition/AngularCondition.hpp" line="52" column="5" bodyfile="src/OpenSpaceToolkit/Astrodynamics/EventCondition/AngularCondition.cpp" bodystart="17" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="classostk_1_1astrodynamics_1_1eventcondition_1_1_angular_condition_1aada2bb08494e603c405c92439b1e5a90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ostk::astrodynamics::eventcondition::AngularCondition::AngularCondition</definition>
        <argsstring>(const String &amp;aName, const Criterion &amp;aCriterion, const std::function&lt; Real(const State &amp;)&gt; &amp;anEvaluator, const Target &amp;aTarget)</argsstring>
        <name>AngularCondition</name>
        <param>
          <type>const String &amp;</type>
          <declname>aName</declname>
        </param>
        <param>
          <type>const <ref refid="classostk_1_1astrodynamics_1_1eventcondition_1_1_angular_condition_1aab27c1430469e94751717ae5a625edaa" kindref="member">Criterion</ref> &amp;</type>
          <declname>aCriterion</declname>
        </param>
        <param>
          <type>const std::function&lt; Real(const <ref refid="classostk_1_1astrodynamics_1_1trajectory_1_1_state" kindref="compound">State</ref> &amp;)&gt; &amp;</type>
          <declname>anEvaluator</declname>
        </param>
        <param>
          <type>const <ref refid="structostk_1_1astrodynamics_1_1_event_condition_1_1_target" kindref="compound">Target</ref> &amp;</type>
          <declname>aTarget</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="classostk_1_1astrodynamics_1_1eventcondition_1_1_angular_condition_1a5f8e01e19f828c3f45c893626a0d8a36" kindref="member">AngularCondition</ref><sp/>angularCondition<sp/>=<sp/>{aName,<sp/>aCriterion,<sp/>anEvaluator,<sp/>aTarget};</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aName</parametername>
</parameternamelist>
<parameterdescription>
<para>A string representing the name of the Angular Event Condition </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aCriterion</parametername>
</parameternamelist>
<parameterdescription>
<para>An enum indicating the criterion used to determine if the Angular Event Condition is met </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>anEvaluator</parametername>
</parameternamelist>
<parameterdescription>
<para>A function evaluating a state to an angle in radians </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aTarget</parametername>
</parameternamelist>
<parameterdescription>
<para>A target </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/Astrodynamics/EventCondition/AngularCondition.hpp" line="70" column="5" bodyfile="src/OpenSpaceToolkit/Astrodynamics/EventCondition/AngularCondition.cpp" bodystart="30" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="classostk_1_1astrodynamics_1_1eventcondition_1_1_angular_condition_1a6a73893e2f54fb5ca2c273b4b999fb98" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>ostk::astrodynamics::eventcondition::AngularCondition::~AngularCondition</definition>
        <argsstring>()</argsstring>
        <name>~AngularCondition</name>
        <briefdescription>
<para>Virtual destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/Astrodynamics/EventCondition/AngularCondition.hpp" line="78" column="13" bodyfile="src/OpenSpaceToolkit/Astrodynamics/EventCondition/AngularCondition.cpp" bodystart="43" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="classostk_1_1astrodynamics_1_1eventcondition_1_1_angular_condition_1a8663626e6c7746111268d12c497ae5e4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classostk_1_1astrodynamics_1_1eventcondition_1_1_angular_condition_1aab27c1430469e94751717ae5a625edaa" kindref="member">Criterion</ref></type>
        <definition>AngularCondition::Criterion ostk::astrodynamics::eventcondition::AngularCondition::getCriterion</definition>
        <argsstring>() const</argsstring>
        <name>getCriterion</name>
        <briefdescription>
<para>Get the criterion of the Event Condition. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Enum representing the criterion of the Event Condition </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/Astrodynamics/EventCondition/AngularCondition.hpp" line="83" column="15" bodyfile="src/OpenSpaceToolkit/Astrodynamics/EventCondition/AngularCondition.cpp" bodystart="45" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="classostk_1_1astrodynamics_1_1eventcondition_1_1_angular_condition_1a75b80dc877b821aca397706aba79a3b6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Angle</type>
        <definition>Angle ostk::astrodynamics::eventcondition::AngularCondition::getTargetAngle</definition>
        <argsstring>() const</argsstring>
        <name>getTargetAngle</name>
        <briefdescription>
<para>Get target. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Target </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/Astrodynamics/EventCondition/AngularCondition.hpp" line="88" column="11" bodyfile="src/OpenSpaceToolkit/Astrodynamics/EventCondition/AngularCondition.cpp" bodystart="50" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="classostk_1_1astrodynamics_1_1eventcondition_1_1_angular_condition_1aefbd4562fc09b0a4962c611a6dbd9f8a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Pair&lt; Angle, Angle &gt;</type>
        <definition>Pair&lt; Angle, Angle &gt; ostk::astrodynamics::eventcondition::AngularCondition::getTargetRange</definition>
        <argsstring>() const</argsstring>
        <name>getTargetRange</name>
        <briefdescription>
<para>Get target range. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Target range </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/Astrodynamics/EventCondition/AngularCondition.hpp" line="93" column="10" bodyfile="src/OpenSpaceToolkit/Astrodynamics/EventCondition/AngularCondition.cpp" bodystart="60" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="classostk_1_1astrodynamics_1_1eventcondition_1_1_angular_condition_1acfd7a3522e5940398b716b38cea1b2b7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void ostk::astrodynamics::eventcondition::AngularCondition::print</definition>
        <argsstring>(std::ostream &amp;anOutputStream, bool displayDecorator=true) const</argsstring>
        <name>print</name>
        <reimplements refid="classostk_1_1astrodynamics_1_1_event_condition_1a865da9c94335da6dca0e8e8b53107ee1">print</reimplements>
        <param>
          <type>std::ostream &amp;</type>
          <declname>anOutputStream</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>displayDecorator</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Print the Event Condition. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">anOutputStream</parametername>
</parameternamelist>
<parameterdescription>
<para>The output stream where the Event Condition will be printed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>displayDecorator</parametername>
</parameternamelist>
<parameterdescription>
<para>A boolean indicating whether or not to display decorator during printing </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/Astrodynamics/EventCondition/AngularCondition.hpp" line="100" column="18" bodyfile="src/OpenSpaceToolkit/Astrodynamics/EventCondition/AngularCondition.cpp" bodystart="70" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="classostk_1_1astrodynamics_1_1eventcondition_1_1_angular_condition_1a6df7534066d81e3414cb81aeb6cd1cf1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool ostk::astrodynamics::eventcondition::AngularCondition::isSatisfied</definition>
        <argsstring>(const State &amp;currentState, const State &amp;previousState) const override</argsstring>
        <name>isSatisfied</name>
        <reimplements refid="classostk_1_1astrodynamics_1_1_event_condition_1a93f8f89b3eee66fb1493a742254e3a15">isSatisfied</reimplements>
        <param>
          <type>const <ref refid="classostk_1_1astrodynamics_1_1trajectory_1_1_state" kindref="compound">State</ref> &amp;</type>
          <declname>currentState</declname>
        </param>
        <param>
          <type>const <ref refid="classostk_1_1astrodynamics_1_1trajectory_1_1_state" kindref="compound">State</ref> &amp;</type>
          <declname>previousState</declname>
        </param>
        <briefdescription>
<para>Check if the Event Condition is satisfied based on current state and previous state/time. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>currentState</parametername>
</parameternamelist>
<parameterdescription>
<para>The current state </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>previousState</parametername>
</parameternamelist>
<parameterdescription>
<para>The previous state</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Boolean value indicating if the Event Condition is met </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/Astrodynamics/EventCondition/AngularCondition.hpp" line="109" column="18" bodyfile="src/OpenSpaceToolkit/Astrodynamics/EventCondition/AngularCondition.cpp" bodystart="91" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="classostk_1_1astrodynamics_1_1eventcondition_1_1_angular_condition_1afc904e8bcfb6079a5215874d47afe4b6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classostk_1_1astrodynamics_1_1eventcondition_1_1_angular_condition" kindref="compound">AngularCondition</ref> *</type>
        <definition>AngularCondition * ostk::astrodynamics::eventcondition::AngularCondition::clone</definition>
        <argsstring>() const override</argsstring>
        <name>clone</name>
        <reimplements refid="classostk_1_1astrodynamics_1_1_event_condition_1ae15cc3454220baff46ac13a7a40aa9e2">clone</reimplements>
        <briefdescription>
<para>Create a copy of this <ref refid="classostk_1_1astrodynamics_1_1eventcondition_1_1_angular_condition" kindref="compound">AngularCondition</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Pointer to the cloned <ref refid="classostk_1_1astrodynamics_1_1_event_condition" kindref="compound">EventCondition</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/Astrodynamics/EventCondition/AngularCondition.hpp" line="114" column="30" bodyfile="src/OpenSpaceToolkit/Astrodynamics/EventCondition/AngularCondition.cpp" bodystart="96" bodyend="99"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classostk_1_1astrodynamics_1_1eventcondition_1_1_angular_condition_1afa5b2ea4d9cee4f333540e2535acded1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classostk_1_1astrodynamics_1_1eventcondition_1_1_angular_condition" kindref="compound">AngularCondition</ref></type>
        <definition>AngularCondition ostk::astrodynamics::eventcondition::AngularCondition::WithinRange</definition>
        <argsstring>(const String &amp;aName, const std::function&lt; Real(const State &amp;)&gt; &amp;anEvaluator, const Pair&lt; Angle, Angle &gt; &amp;aTargetRange)</argsstring>
        <name>WithinRange</name>
        <param>
          <type>const String &amp;</type>
          <declname>aName</declname>
        </param>
        <param>
          <type>const std::function&lt; Real(const <ref refid="classostk_1_1astrodynamics_1_1trajectory_1_1_state" kindref="compound">State</ref> &amp;)&gt; &amp;</type>
          <declname>anEvaluator</declname>
        </param>
        <param>
          <type>const Pair&lt; Angle, Angle &gt; &amp;</type>
          <declname>aTargetRange</declname>
        </param>
        <briefdescription>
<para>Create an angular condition that is satisfied when the angle is within a range. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aName</parametername>
</parameternamelist>
<parameterdescription>
<para>A string representing the name of the Angular Event Condition </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>anEvaluator</parametername>
</parameternamelist>
<parameterdescription>
<para>A function evaluating a state to an angle in radians </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aTargetRange</parametername>
</parameternamelist>
<parameterdescription>
<para>A pair of angles representing the range of angles that satisfy the </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Angular Event Condition </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/Astrodynamics/EventCondition/AngularCondition.hpp" line="122" column="29" bodyfile="src/OpenSpaceToolkit/Astrodynamics/EventCondition/AngularCondition.cpp" bodystart="101" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="classostk_1_1astrodynamics_1_1eventcondition_1_1_angular_condition_1a134490fba75d997c2e47da86efd33cc2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>String</type>
        <definition>String ostk::astrodynamics::eventcondition::AngularCondition::StringFromCriterion</definition>
        <argsstring>(const Criterion &amp;aCriterion)</argsstring>
        <name>StringFromCriterion</name>
        <param>
          <type>const <ref refid="classostk_1_1astrodynamics_1_1eventcondition_1_1_angular_condition_1aab27c1430469e94751717ae5a625edaa" kindref="member">Criterion</ref> &amp;</type>
          <declname>aCriterion</declname>
        </param>
        <briefdescription>
<para>Convert criterion to string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aCriterion</parametername>
</parameternamelist>
<parameterdescription>
<para>An enum representing the criterion</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>String representing the given criterion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/Astrodynamics/EventCondition/AngularCondition.hpp" line="133" column="19" bodyfile="src/OpenSpaceToolkit/Astrodynamics/EventCondition/AngularCondition.cpp" bodystart="108" bodyend="123"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classostk_1_1astrodynamics_1_1eventcondition_1_1_angular_condition_1a44f75f74864b3395fe578260a3584d7b" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ostk::astrodynamics::eventcondition::AngularCondition::IsPositiveCrossing</definition>
        <argsstring>(const Real &amp;currentAngle, const Real &amp;previousAngle, const Real &amp;targetAngle)</argsstring>
        <name>IsPositiveCrossing</name>
        <param>
          <type>const Real &amp;</type>
          <declname>currentAngle</declname>
        </param>
        <param>
          <type>const Real &amp;</type>
          <declname>previousAngle</declname>
        </param>
        <param>
          <type>const Real &amp;</type>
          <declname>targetAngle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/Astrodynamics/EventCondition/AngularCondition.hpp" line="140" column="17" bodyfile="src/OpenSpaceToolkit/Astrodynamics/EventCondition/AngularCondition.cpp" bodystart="125" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="classostk_1_1astrodynamics_1_1eventcondition_1_1_angular_condition_1a1d6699a57b8537c8e118ee60e5408091" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ostk::astrodynamics::eventcondition::AngularCondition::IsNegativeCrossing</definition>
        <argsstring>(const Real &amp;currentAngle, const Real &amp;previousAngle, const Real &amp;targetAngle)</argsstring>
        <name>IsNegativeCrossing</name>
        <param>
          <type>const Real &amp;</type>
          <declname>currentAngle</declname>
        </param>
        <param>
          <type>const Real &amp;</type>
          <declname>previousAngle</declname>
        </param>
        <param>
          <type>const Real &amp;</type>
          <declname>targetAngle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/Astrodynamics/EventCondition/AngularCondition.hpp" line="141" column="17" bodyfile="src/OpenSpaceToolkit/Astrodynamics/EventCondition/AngularCondition.cpp" bodystart="143" bodyend="159"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classostk_1_1astrodynamics_1_1eventcondition_1_1_angular_condition_1ae24a3555d9b0b69588799a89d5943976" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::function&lt; bool(const Real &amp;, const Real &amp;, const Real &amp;)&gt;</type>
        <definition>std::function&lt; bool(const Real &amp;, const Real &amp;, const Real &amp;)&gt; ostk::astrodynamics::eventcondition::AngularCondition::GenerateComparator</definition>
        <argsstring>(const Criterion &amp;aCriterion)</argsstring>
        <name>GenerateComparator</name>
        <param>
          <type>const <ref refid="classostk_1_1astrodynamics_1_1eventcondition_1_1_angular_condition_1aab27c1430469e94751717ae5a625edaa" kindref="member">Criterion</ref> &amp;</type>
          <declname>aCriterion</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/Astrodynamics/EventCondition/AngularCondition.hpp" line="143" column="19" bodyfile="src/OpenSpaceToolkit/Astrodynamics/EventCondition/AngularCondition.cpp" bodystart="161" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="classostk_1_1astrodynamics_1_1eventcondition_1_1_angular_condition_1a600663a7f834d2c14cd20f1ba7d48328" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ostk::astrodynamics::eventcondition::AngularCondition::AngularCondition</definition>
        <argsstring>(const String &amp;aName, const Criterion &amp;aCriterion, const std::function&lt; Real(const State &amp;)&gt; &amp;anEvaluator, const Pair&lt; Angle, Angle &gt; &amp;aTargetRange)</argsstring>
        <name>AngularCondition</name>
        <param>
          <type>const String &amp;</type>
          <declname>aName</declname>
        </param>
        <param>
          <type>const <ref refid="classostk_1_1astrodynamics_1_1eventcondition_1_1_angular_condition_1aab27c1430469e94751717ae5a625edaa" kindref="member">Criterion</ref> &amp;</type>
          <declname>aCriterion</declname>
        </param>
        <param>
          <type>const std::function&lt; Real(const <ref refid="classostk_1_1astrodynamics_1_1trajectory_1_1_state" kindref="compound">State</ref> &amp;)&gt; &amp;</type>
          <declname>anEvaluator</declname>
        </param>
        <param>
          <type>const Pair&lt; Angle, Angle &gt; &amp;</type>
          <declname>aTargetRange</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/Astrodynamics/EventCondition/AngularCondition.hpp" line="145" column="5" bodyfile="src/OpenSpaceToolkit/Astrodynamics/EventCondition/AngularCondition.cpp" bodystart="192" bodyend="220"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>An Event Condition that works with angles. Handles wrapping angle to [0,360). </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>ostk::astrodynamics::EventCondition</label>
        <link refid="classostk_1_1astrodynamics_1_1_event_condition"/>
      </node>
      <node id="1">
        <label>ostk::astrodynamics::eventcondition::AngularCondition</label>
        <link refid="classostk_1_1astrodynamics_1_1eventcondition_1_1_angular_condition"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4">
        <label>ostk::astrodynamics::EventCondition::Target</label>
        <link refid="structostk_1_1astrodynamics_1_1_event_condition_1_1_target"/>
        <childnode refid="5" relation="usage">
          <edgelabel>valueOffset</edgelabel>
          <edgelabel>value</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>String</label>
      </node>
      <node id="5">
        <label>Real</label>
      </node>
      <node id="2">
        <label>ostk::astrodynamics::EventCondition</label>
        <link refid="classostk_1_1astrodynamics_1_1_event_condition"/>
        <childnode refid="3" relation="usage">
          <edgelabel>name_</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>target_</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>ostk::astrodynamics::eventcondition::AngularCondition</label>
        <link refid="classostk_1_1astrodynamics_1_1eventcondition_1_1_angular_condition"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/OpenSpaceToolkit/Astrodynamics/EventCondition/AngularCondition.hpp" line="31" column="1" bodyfile="include/OpenSpaceToolkit/Astrodynamics/EventCondition/AngularCondition.hpp" bodystart="30" bodyend="151"/>
    <listofallmembers>
      <member refid="classostk_1_1astrodynamics_1_1eventcondition_1_1_angular_condition_1a5f8e01e19f828c3f45c893626a0d8a36" prot="public" virt="non-virtual"><scope>ostk::astrodynamics::eventcondition::AngularCondition</scope><name>AngularCondition</name></member>
      <member refid="classostk_1_1astrodynamics_1_1eventcondition_1_1_angular_condition_1aada2bb08494e603c405c92439b1e5a90" prot="public" virt="non-virtual"><scope>ostk::astrodynamics::eventcondition::AngularCondition</scope><name>AngularCondition</name></member>
      <member refid="classostk_1_1astrodynamics_1_1eventcondition_1_1_angular_condition_1a600663a7f834d2c14cd20f1ba7d48328" prot="private" virt="non-virtual"><scope>ostk::astrodynamics::eventcondition::AngularCondition</scope><name>AngularCondition</name></member>
      <member refid="classostk_1_1astrodynamics_1_1eventcondition_1_1_angular_condition_1afc904e8bcfb6079a5215874d47afe4b6" prot="public" virt="virtual"><scope>ostk::astrodynamics::eventcondition::AngularCondition</scope><name>clone</name></member>
      <member refid="classostk_1_1astrodynamics_1_1eventcondition_1_1_angular_condition_1a1baa4282e94bcd37a20f7512058e673c" prot="private" virt="non-virtual"><scope>ostk::astrodynamics::eventcondition::AngularCondition</scope><name>comparator_</name></member>
      <member refid="classostk_1_1astrodynamics_1_1eventcondition_1_1_angular_condition_1aab27c1430469e94751717ae5a625edaa" prot="public" virt="non-virtual"><scope>ostk::astrodynamics::eventcondition::AngularCondition</scope><name>Criterion</name></member>
      <member refid="classostk_1_1astrodynamics_1_1eventcondition_1_1_angular_condition_1af89972c72eaac01148c9dcbe9e5ac676" prot="private" virt="non-virtual"><scope>ostk::astrodynamics::eventcondition::AngularCondition</scope><name>criterion_</name></member>
      <member refid="classostk_1_1astrodynamics_1_1_event_condition_1a22fb110e41e196c20dee2d3100ea9e2d" prot="protected" virt="non-virtual"><scope>ostk::astrodynamics::eventcondition::AngularCondition</scope><name>evaluator_</name></member>
      <member refid="classostk_1_1astrodynamics_1_1_event_condition_1aa9db3935e2fee560f9852e6189d6edc3" prot="public" virt="non-virtual"><scope>ostk::astrodynamics::eventcondition::AngularCondition</scope><name>EventCondition</name></member>
      <member refid="classostk_1_1astrodynamics_1_1_event_condition_1a055740b32c8dded3fed30df4007b5464" prot="public" virt="non-virtual"><scope>ostk::astrodynamics::eventcondition::AngularCondition</scope><name>EventCondition</name></member>
      <member refid="classostk_1_1astrodynamics_1_1eventcondition_1_1_angular_condition_1ae24a3555d9b0b69588799a89d5943976" prot="private" virt="non-virtual"><scope>ostk::astrodynamics::eventcondition::AngularCondition</scope><name>GenerateComparator</name></member>
      <member refid="classostk_1_1astrodynamics_1_1eventcondition_1_1_angular_condition_1a8663626e6c7746111268d12c497ae5e4" prot="public" virt="non-virtual"><scope>ostk::astrodynamics::eventcondition::AngularCondition</scope><name>getCriterion</name></member>
      <member refid="classostk_1_1astrodynamics_1_1_event_condition_1a1b745a1fb8324f122f298dfd92568f6b" prot="public" virt="non-virtual"><scope>ostk::astrodynamics::eventcondition::AngularCondition</scope><name>getEvaluator</name></member>
      <member refid="classostk_1_1astrodynamics_1_1_event_condition_1a87dde43e3ace08e700b68a7c7b1cab81" prot="public" virt="non-virtual"><scope>ostk::astrodynamics::eventcondition::AngularCondition</scope><name>getName</name></member>
      <member refid="classostk_1_1astrodynamics_1_1_event_condition_1ab99ea53a7ef849753078be800d798874" prot="public" virt="non-virtual"><scope>ostk::astrodynamics::eventcondition::AngularCondition</scope><name>getTarget</name></member>
      <member refid="classostk_1_1astrodynamics_1_1eventcondition_1_1_angular_condition_1a75b80dc877b821aca397706aba79a3b6" prot="public" virt="non-virtual"><scope>ostk::astrodynamics::eventcondition::AngularCondition</scope><name>getTargetAngle</name></member>
      <member refid="classostk_1_1astrodynamics_1_1eventcondition_1_1_angular_condition_1aefbd4562fc09b0a4962c611a6dbd9f8a" prot="public" virt="non-virtual"><scope>ostk::astrodynamics::eventcondition::AngularCondition</scope><name>getTargetRange</name></member>
      <member refid="classostk_1_1astrodynamics_1_1eventcondition_1_1_angular_condition_1a1d6699a57b8537c8e118ee60e5408091" prot="private" virt="non-virtual"><scope>ostk::astrodynamics::eventcondition::AngularCondition</scope><name>IsNegativeCrossing</name></member>
      <member refid="classostk_1_1astrodynamics_1_1eventcondition_1_1_angular_condition_1a44f75f74864b3395fe578260a3584d7b" prot="private" virt="non-virtual"><scope>ostk::astrodynamics::eventcondition::AngularCondition</scope><name>IsPositiveCrossing</name></member>
      <member refid="classostk_1_1astrodynamics_1_1eventcondition_1_1_angular_condition_1a6df7534066d81e3414cb81aeb6cd1cf1" prot="public" virt="virtual"><scope>ostk::astrodynamics::eventcondition::AngularCondition</scope><name>isSatisfied</name></member>
      <member refid="classostk_1_1astrodynamics_1_1_event_condition_1af55b4fe880915e5fa993476d205ad3ad" prot="protected" virt="non-virtual"><scope>ostk::astrodynamics::eventcondition::AngularCondition</scope><name>name_</name></member>
      <member refid="classostk_1_1astrodynamics_1_1eventcondition_1_1_angular_condition_1acfd7a3522e5940398b716b38cea1b2b7" prot="public" virt="virtual"><scope>ostk::astrodynamics::eventcondition::AngularCondition</scope><name>print</name></member>
      <member refid="classostk_1_1astrodynamics_1_1eventcondition_1_1_angular_condition_1a134490fba75d997c2e47da86efd33cc2" prot="public" virt="non-virtual"><scope>ostk::astrodynamics::eventcondition::AngularCondition</scope><name>StringFromCriterion</name></member>
      <member refid="classostk_1_1astrodynamics_1_1_event_condition_1a4a084bbc8324927fc3ebd14984c4c4a0" prot="protected" virt="non-virtual"><scope>ostk::astrodynamics::eventcondition::AngularCondition</scope><name>target_</name></member>
      <member refid="classostk_1_1astrodynamics_1_1eventcondition_1_1_angular_condition_1a8ccd04f557d2551f1565369e60a4396e" prot="private" virt="non-virtual"><scope>ostk::astrodynamics::eventcondition::AngularCondition</scope><name>targetRange_</name></member>
      <member refid="classostk_1_1astrodynamics_1_1_event_condition_1aa35b925dc33acbf74a614203c87d8264" prot="public" virt="virtual"><scope>ostk::astrodynamics::eventcondition::AngularCondition</scope><name>updateTarget</name></member>
      <member refid="classostk_1_1astrodynamics_1_1eventcondition_1_1_angular_condition_1afa5b2ea4d9cee4f333540e2535acded1" prot="public" virt="non-virtual"><scope>ostk::astrodynamics::eventcondition::AngularCondition</scope><name>WithinRange</name></member>
      <member refid="classostk_1_1astrodynamics_1_1eventcondition_1_1_angular_condition_1a6a73893e2f54fb5ca2c273b4b999fb98" prot="public" virt="virtual"><scope>ostk::astrodynamics::eventcondition::AngularCondition</scope><name>~AngularCondition</name></member>
      <member refid="classostk_1_1astrodynamics_1_1_event_condition_1aa60a1788d6c2a3acfd9dcd9fdd949076" prot="public" virt="virtual"><scope>ostk::astrodynamics::eventcondition::AngularCondition</scope><name>~EventCondition</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
