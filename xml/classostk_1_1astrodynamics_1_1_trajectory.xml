<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classostk_1_1astrodynamics_1_1_trajectory" kind="class" language="C++" prot="public">
    <compoundname>ostk::astrodynamics::Trajectory</compoundname>
    <derivedcompoundref refid="classostk_1_1astrodynamics_1_1trajectory_1_1_orbit" prot="public" virt="non-virtual">ostk::astrodynamics::trajectory::Orbit</derivedcompoundref>
    <includes refid="_trajectory_8hpp" local="no">Trajectory.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classostk_1_1astrodynamics_1_1_trajectory_1afb4157336944088c5cf9e1080cce04b0" prot="private" static="no" mutable="no">
        <type>Unique&lt; <ref refid="classostk_1_1astrodynamics_1_1trajectory_1_1_model" kindref="compound">Model</ref> &gt;</type>
        <definition>Unique&lt;Model&gt; ostk::astrodynamics::Trajectory::modelUPtr_</definition>
        <argsstring></argsstring>
        <name>modelUPtr_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/Astrodynamics/Trajectory.hpp" line="263" column="12" bodyfile="include/OpenSpaceToolkit/Astrodynamics/Trajectory.hpp" bodystart="263" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classostk_1_1astrodynamics_1_1_trajectory_1a8eb87464a355610b52b9b2401a5ceb35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ostk::astrodynamics::Trajectory::Trajectory</definition>
        <argsstring>(const Model &amp;aModel)</argsstring>
        <name>Trajectory</name>
        <param>
          <type>const <ref refid="classostk_1_1astrodynamics_1_1trajectory_1_1_model" kindref="compound">Model</ref> &amp;</type>
          <declname>aModel</declname>
        </param>
        <briefdescription>
<para>Constructor (model) </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting filename=".cpp"><codeline><highlight class="normal">Tabulated<sp/>model<sp/>=<sp/><ref refid="classostk_1_1astrodynamics_1_1trajectory_1_1model_1_1_tabulated_1aa1d0df1bc3984644065a06e462ff0704" kindref="member">Tabulated::Load</ref>(File::Path(Path::Parse(</highlight><highlight class="stringliteral">&quot;/path/to/trajectory.csv&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline><highlight class="normal"><ref refid="classostk_1_1astrodynamics_1_1_trajectory_1a8eb87464a355610b52b9b2401a5ceb35" kindref="member">Trajectory</ref><sp/>trajectory<sp/>=<sp/>{<sp/>model<sp/>};</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aModel</parametername>
</parameternamelist>
<parameterdescription>
<para>A trajectory model </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/Astrodynamics/Trajectory.hpp" line="65" column="5" bodyfile="src/OpenSpaceToolkit/Astrodynamics/Trajectory.cpp" bodystart="40" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="classostk_1_1astrodynamics_1_1_trajectory_1a333aa41110b47e8c69a97aae3669032c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ostk::astrodynamics::Trajectory::Trajectory</definition>
        <argsstring>(const Array&lt; State &gt; &amp;aStateArray)</argsstring>
        <name>Trajectory</name>
        <param>
          <type>const Array&lt; <ref refid="classostk_1_1astrodynamics_1_1trajectory_1_1_state" kindref="compound">State</ref> &gt; &amp;</type>
          <declname>aStateArray</declname>
        </param>
        <briefdescription>
<para>Constructor (state array) </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting filename=".cpp"><codeline><highlight class="normal">Array&lt;State&gt;<sp/>stateArray<sp/>=<sp/>{<sp/>...<sp/>};</highlight></codeline>
<codeline><highlight class="normal"><ref refid="classostk_1_1astrodynamics_1_1_trajectory_1a8eb87464a355610b52b9b2401a5ceb35" kindref="member">Trajectory</ref><sp/>trajectory<sp/>=<sp/>{<sp/>stateArray<sp/>};</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aStateArray</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of states </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/Astrodynamics/Trajectory.hpp" line="75" column="5" bodyfile="src/OpenSpaceToolkit/Astrodynamics/Trajectory.cpp" bodystart="45" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="classostk_1_1astrodynamics_1_1_trajectory_1adc2a737f516231faa65684ab6232dc7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ostk::astrodynamics::Trajectory::Trajectory</definition>
        <argsstring>(const Trajectory &amp;aTrajectory)</argsstring>
        <name>Trajectory</name>
        <param>
          <type>const <ref refid="classostk_1_1astrodynamics_1_1_trajectory" kindref="compound">Trajectory</ref> &amp;</type>
          <declname>aTrajectory</declname>
        </param>
        <briefdescription>
<para>Copy constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aTrajectory</parametername>
</parameternamelist>
<parameterdescription>
<para>A trajectory </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/Astrodynamics/Trajectory.hpp" line="80" column="5" bodyfile="src/OpenSpaceToolkit/Astrodynamics/Trajectory.cpp" bodystart="50" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="classostk_1_1astrodynamics_1_1_trajectory_1ad98dea12af414af8162b085cdd5dd511" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classostk_1_1astrodynamics_1_1_trajectory" kindref="compound">Trajectory</ref> &amp;</type>
        <definition>Trajectory &amp; ostk::astrodynamics::Trajectory::operator=</definition>
        <argsstring>(const Trajectory &amp;aTrajectory)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classostk_1_1astrodynamics_1_1_trajectory" kindref="compound">Trajectory</ref> &amp;</type>
          <declname>aTrajectory</declname>
        </param>
        <briefdescription>
<para>Copy assignment operator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/Astrodynamics/Trajectory.hpp" line="83" column="16" bodyfile="src/OpenSpaceToolkit/Astrodynamics/Trajectory.cpp" bodystart="55" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="classostk_1_1astrodynamics_1_1_trajectory_1aab7ed9137581cdc28ce569f8165c1e60" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ostk::astrodynamics::Trajectory::operator==</definition>
        <argsstring>(const Trajectory &amp;aTrajectory) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classostk_1_1astrodynamics_1_1_trajectory" kindref="compound">Trajectory</ref> &amp;</type>
          <declname>aTrajectory</declname>
        </param>
        <briefdescription>
<para>Equal to operator. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="classostk_1_1astrodynamics_1_1_trajectory_1a8eb87464a355610b52b9b2401a5ceb35" kindref="member">Trajectory</ref>(...)<sp/>==<sp/><ref refid="classostk_1_1astrodynamics_1_1_trajectory_1a8eb87464a355610b52b9b2401a5ceb35" kindref="member">Trajectory</ref>(...);</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aTrajectory</parametername>
</parameternamelist>
<parameterdescription>
<para>A trajectory </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if trajectories are equal </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/Astrodynamics/Trajectory.hpp" line="93" column="10" bodyfile="src/OpenSpaceToolkit/Astrodynamics/Trajectory.cpp" bodystart="65" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="classostk_1_1astrodynamics_1_1_trajectory_1aa46d34603ab19531c6b6dfde9b394e85" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ostk::astrodynamics::Trajectory::operator!=</definition>
        <argsstring>(const Trajectory &amp;aTrajectory) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classostk_1_1astrodynamics_1_1_trajectory" kindref="compound">Trajectory</ref> &amp;</type>
          <declname>aTrajectory</declname>
        </param>
        <briefdescription>
<para>Not equal to operator. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="classostk_1_1astrodynamics_1_1_trajectory_1a8eb87464a355610b52b9b2401a5ceb35" kindref="member">Trajectory</ref>(...)<sp/>!=<sp/><ref refid="classostk_1_1astrodynamics_1_1_trajectory_1a8eb87464a355610b52b9b2401a5ceb35" kindref="member">Trajectory</ref>(...);</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aTrajectory</parametername>
</parameternamelist>
<parameterdescription>
<para>A trajectory </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if trajectories are not equal </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/Astrodynamics/Trajectory.hpp" line="103" column="10" bodyfile="src/OpenSpaceToolkit/Astrodynamics/Trajectory.cpp" bodystart="75" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="classostk_1_1astrodynamics_1_1_trajectory_1a6f0f0e6fb825b858c86ffe9d9071fdbd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ostk::astrodynamics::Trajectory::isDefined</definition>
        <argsstring>() const</argsstring>
        <name>isDefined</name>
        <briefdescription>
<para>Check if trajectory is defined. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="classostk_1_1astrodynamics_1_1_trajectory_1a8eb87464a355610b52b9b2401a5ceb35" kindref="member">Trajectory</ref>(...).isDefined();</highlight></codeline>
</programlisting></para>
<para><simplesect kind="return"><para>True if trajectory is defined </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/Astrodynamics/Trajectory.hpp" line="123" column="10" bodyfile="src/OpenSpaceToolkit/Astrodynamics/Trajectory.cpp" bodystart="87" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="classostk_1_1astrodynamics_1_1_trajectory_1a00e0200bc70fc7c5c764b2204f3232f8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classostk_1_1astrodynamics_1_1trajectory_1_1_model" kindref="compound">Model</ref> &amp;</type>
        <definition>const Model &amp; ostk::astrodynamics::Trajectory::accessModel</definition>
        <argsstring>() const</argsstring>
        <name>accessModel</name>
        <briefdescription>
<para><ref refid="classostk_1_1astrodynamics_1_1_access" kindref="compound">Access</ref> trajectory model. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Reference to trajectory model </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/Astrodynamics/Trajectory.hpp" line="128" column="17" bodyfile="src/OpenSpaceToolkit/Astrodynamics/Trajectory.cpp" bodystart="92" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="classostk_1_1astrodynamics_1_1_trajectory_1ab72172193ac72db5b7acf922d1b0a9b7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classostk_1_1astrodynamics_1_1trajectory_1_1_state" kindref="compound">State</ref></type>
        <definition>State ostk::astrodynamics::Trajectory::getStateAt</definition>
        <argsstring>(const Instant &amp;anInstant) const</argsstring>
        <name>getStateAt</name>
        <param>
          <type>const Instant &amp;</type>
          <declname>anInstant</declname>
        </param>
        <briefdescription>
<para>Get state at a given instant. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="classostk_1_1astrodynamics_1_1_trajectory_1a8eb87464a355610b52b9b2401a5ceb35" kindref="member">Trajectory</ref><sp/>trajectory<sp/>=<sp/>{<sp/>...<sp/>};</highlight></codeline>
<codeline><highlight class="normal">Instant<sp/>instant<sp/>=<sp/>{<sp/>...<sp/>};</highlight></codeline>
<codeline><highlight class="normal">State<sp/>state<sp/>=<sp/>trajectory.getStateAt(instant);</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>anInstant</parametername>
</parameternamelist>
<parameterdescription>
<para>An instant </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>State </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/Astrodynamics/Trajectory.hpp" line="140" column="11" bodyfile="src/OpenSpaceToolkit/Astrodynamics/Trajectory.cpp" bodystart="107" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="classostk_1_1astrodynamics_1_1_trajectory_1a828ef112e449b697c961e61825b48cbc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Array&lt; <ref refid="classostk_1_1astrodynamics_1_1trajectory_1_1_state" kindref="compound">State</ref> &gt;</type>
        <definition>Array&lt; State &gt; ostk::astrodynamics::Trajectory::getStatesAt</definition>
        <argsstring>(const Array&lt; Instant &gt; &amp;anInstantArray) const</argsstring>
        <name>getStatesAt</name>
        <param>
          <type>const Array&lt; Instant &gt; &amp;</type>
          <declname>anInstantArray</declname>
        </param>
        <briefdescription>
<para>Get states at a given instants. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="classostk_1_1astrodynamics_1_1_trajectory_1a8eb87464a355610b52b9b2401a5ceb35" kindref="member">Trajectory</ref><sp/>trajectory<sp/>=<sp/>{<sp/>...<sp/>};</highlight></codeline>
<codeline><highlight class="normal">Array&lt;Instant&gt;<sp/>instants<sp/>=<sp/>{<sp/>...<sp/>};</highlight></codeline>
<codeline><highlight class="normal">Array&lt;State&gt;<sp/>state<sp/>=<sp/>trajectory.getStatesAt(instants);</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>anInstantArray</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of instants </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Array of states </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/Astrodynamics/Trajectory.hpp" line="152" column="11" bodyfile="src/OpenSpaceToolkit/Astrodynamics/Trajectory.cpp" bodystart="117" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="classostk_1_1astrodynamics_1_1_trajectory_1a5621f3ab62b023cd125505adda04e70a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void ostk::astrodynamics::Trajectory::print</definition>
        <argsstring>(std::ostream &amp;anOutputStream, bool displayDecorator=true) const</argsstring>
        <name>print</name>
        <reimplementedby refid="classostk_1_1astrodynamics_1_1trajectory_1_1_orbit_1acfc9841a0a122ab45e9a7b945130a0dd">print</reimplementedby>
        <param>
          <type>std::ostream &amp;</type>
          <declname>anOutputStream</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>displayDecorator</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Print trajectory to output stream. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="classostk_1_1astrodynamics_1_1_trajectory_1a8eb87464a355610b52b9b2401a5ceb35" kindref="member">Trajectory</ref><sp/>trajectory<sp/>=<sp/>{<sp/>...<sp/>};</highlight></codeline>
<codeline><highlight class="normal">trajectory.print(std::cout,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>anOutputStream</parametername>
</parameternamelist>
<parameterdescription>
<para>An output stream </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>displayDecorator</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, display decorator </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/Astrodynamics/Trajectory.hpp" line="163" column="18" bodyfile="src/OpenSpaceToolkit/Astrodynamics/Trajectory.cpp" bodystart="127" bodyend="136"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classostk_1_1astrodynamics_1_1_trajectory_1aef0327f0240dc2d71eca34dc287f88ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;anOutputStream, const Trajectory &amp;aTrajectory)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>anOutputStream</declname>
        </param>
        <param>
          <type>const <ref refid="classostk_1_1astrodynamics_1_1_trajectory" kindref="compound">Trajectory</ref> &amp;</type>
          <declname>aTrajectory</declname>
        </param>
        <briefdescription>
<para>Output stream operator. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting filename=".cpp"><codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/><ref refid="classostk_1_1astrodynamics_1_1_trajectory_1a8eb87464a355610b52b9b2401a5ceb35" kindref="member">Trajectory</ref>(...);</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>anOutputStream</parametername>
</parameternamelist>
<parameterdescription>
<para>An output stream </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aTrajectory</parametername>
</parameternamelist>
<parameterdescription>
<para>A trajectory </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to output stream </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/Astrodynamics/Trajectory.hpp" line="114" column="12" bodyfile="src/OpenSpaceToolkit/Astrodynamics/Trajectory.cpp" bodystart="80" bodyend="85"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classostk_1_1astrodynamics_1_1_trajectory_1a5cd4a31ab2f9e4b4ca5dd62c515490ef" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classostk_1_1astrodynamics_1_1_trajectory" kindref="compound">Trajectory</ref></type>
        <definition>Trajectory ostk::astrodynamics::Trajectory::Undefined</definition>
        <argsstring>()</argsstring>
        <name>Undefined</name>
        <briefdescription>
<para>Constructs an undefined trajectory. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="classostk_1_1astrodynamics_1_1_trajectory_1a8eb87464a355610b52b9b2401a5ceb35" kindref="member">Trajectory</ref><sp/>trajectory<sp/>=<sp/><ref refid="classostk_1_1astrodynamics_1_1_trajectory_1a5cd4a31ab2f9e4b4ca5dd62c515490ef" kindref="member">Trajectory::Undefined</ref>();<sp/></highlight><highlight class="comment">//<sp/>Undefined</highlight></codeline>
</programlisting></para>
<para><simplesect kind="return"><para>Undefined trajectory </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/Astrodynamics/Trajectory.hpp" line="172" column="23" bodyfile="src/OpenSpaceToolkit/Astrodynamics/Trajectory.cpp" bodystart="138" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="classostk_1_1astrodynamics_1_1_trajectory_1a7c3e5cb45279eb2d7cbf32c2347d3840" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classostk_1_1astrodynamics_1_1_trajectory" kindref="compound">Trajectory</ref></type>
        <definition>Trajectory ostk::astrodynamics::Trajectory::Position</definition>
        <argsstring>(const physics::coordinate::Position &amp;aPosition)</argsstring>
        <name>Position</name>
        <param>
          <type>const physics::coordinate::Position &amp;</type>
          <declname>aPosition</declname>
        </param>
        <briefdescription>
<para>Constructs a trajectory from a given position. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="classostk_1_1astrodynamics_1_1_trajectory_1a7c3e5cb45279eb2d7cbf32c2347d3840" kindref="member">Position</ref><sp/>position<sp/>=<sp/>Position::Meters({<sp/>0.0,<sp/>0.0,<sp/>0.0<sp/>},<sp/>Frame::GCRF());</highlight></codeline>
<codeline><highlight class="normal"><ref refid="classostk_1_1astrodynamics_1_1_trajectory_1a8eb87464a355610b52b9b2401a5ceb35" kindref="member">Trajectory</ref><sp/>trajectory<sp/>=<sp/><ref refid="classostk_1_1astrodynamics_1_1_trajectory_1a7c3e5cb45279eb2d7cbf32c2347d3840" kindref="member">Trajectory::Position</ref>(position);</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aPosition</parametername>
</parameternamelist>
<parameterdescription>
<para>A position </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Static trajectory </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/Astrodynamics/Trajectory.hpp" line="183" column="23" bodyfile="src/OpenSpaceToolkit/Astrodynamics/Trajectory.cpp" bodystart="143" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="classostk_1_1astrodynamics_1_1_trajectory_1a9775d82dfd4fe3148838d84371021117" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classostk_1_1astrodynamics_1_1_trajectory" kindref="compound">Trajectory</ref></type>
        <definition>Trajectory ostk::astrodynamics::Trajectory::GroundStrip</definition>
        <argsstring>(const LLA &amp;aStartLLA, const LLA &amp;anEndLLA, const Derived &amp;aGroundSpeed, const Instant &amp;aStartInstant, const Celestial &amp;aCelestial=Earth::WGS84(), const Duration &amp;aStepSize=Duration::Seconds(1.0))</argsstring>
        <name>GroundStrip</name>
        <param>
          <type>const LLA &amp;</type>
          <declname>aStartLLA</declname>
        </param>
        <param>
          <type>const LLA &amp;</type>
          <declname>anEndLLA</declname>
        </param>
        <param>
          <type>const Derived &amp;</type>
          <declname>aGroundSpeed</declname>
        </param>
        <param>
          <type>const Instant &amp;</type>
          <declname>aStartInstant</declname>
        </param>
        <param>
          <type>const Celestial &amp;</type>
          <declname>aCelestial</declname>
          <defval>Earth::WGS84()</defval>
        </param>
        <param>
          <type>const Duration &amp;</type>
          <declname>aStepSize</declname>
          <defval>Duration::Seconds(1.0)</defval>
        </param>
        <briefdescription>
<para>Constructs a trajectory for a given strip, specified ground speed and start instant. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting filename=".cpp"><codeline><highlight class="normal">LLA<sp/>startLLA<sp/>=<sp/>{<sp/>0.0,<sp/>0.0,<sp/>0.0<sp/>};</highlight></codeline>
<codeline><highlight class="normal">LLA<sp/>endLLA<sp/>=<sp/>{<sp/>1.0,<sp/>0.0,<sp/>0.0<sp/>};</highlight></codeline>
<codeline><highlight class="normal">Derived<sp/>groundSpeed<sp/>=<sp/>Derived(1000.0,<sp/>Derived::Unit::MeterPerSecond());</highlight></codeline>
<codeline><highlight class="normal">Instant<sp/>startInstant<sp/>=<sp/>Instant::DateTime(DateTime::Parse(</highlight><highlight class="stringliteral">&quot;2020-01-01<sp/>00:00:00&quot;</highlight><highlight class="normal">),<sp/>Scale::UTC);</highlight></codeline>
<codeline><highlight class="normal">Earth<sp/>earth<sp/>=<sp/>Earth::WGS84();</highlight></codeline>
<codeline><highlight class="normal">Duration<sp/>stepSize<sp/>=<sp/>Duration::Seconds(1.0);</highlight></codeline>
<codeline><highlight class="normal"><ref refid="classostk_1_1astrodynamics_1_1_trajectory_1a8eb87464a355610b52b9b2401a5ceb35" kindref="member">Trajectory</ref><sp/>trajectory<sp/>=<sp/><ref refid="classostk_1_1astrodynamics_1_1_trajectory_1a9775d82dfd4fe3148838d84371021117" kindref="member">Trajectory::GroundStrip</ref>(startLLA,<sp/>endLLA,<sp/>groundSpeed,<sp/>startInstant,<sp/>earth,</highlight></codeline>
<codeline><highlight class="normal">duration);</highlight></codeline>
</programlisting></para>
<para><xrefsect id="deprecated_1_deprecated000003"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use Trajectory(TargetScan::FromGroundSpeed(...)) instead. </para>
</xrefdescription></xrefsect><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aStartLLA</parametername>
</parameternamelist>
<parameterdescription>
<para>A start LLA </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>anEndLLA</parametername>
</parameternamelist>
<parameterdescription>
<para>An end LLA </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aGroundSpeed</parametername>
</parameternamelist>
<parameterdescription>
<para>A ground speed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aStartInstant</parametername>
</parameternamelist>
<parameterdescription>
<para>A start instant </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aCelestial</parametername>
</parameternamelist>
<parameterdescription>
<para>Celestial body </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>GroundStrip trajectory </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/Astrodynamics/Trajectory.hpp" line="206" column="23" bodyfile="src/OpenSpaceToolkit/Astrodynamics/Trajectory.cpp" bodystart="153" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="classostk_1_1astrodynamics_1_1_trajectory_1ae0657f4bca61121f64aa8d66643afccd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classostk_1_1astrodynamics_1_1_trajectory" kindref="compound">Trajectory</ref></type>
        <definition>Trajectory ostk::astrodynamics::Trajectory::GroundStrip</definition>
        <argsstring>(const LLA &amp;aStartLLA, const LLA &amp;anEndLLA, const Array&lt; Instant &gt; &amp;anInstantArray, const Celestial &amp;aCelestial=Earth::WGS84())</argsstring>
        <name>GroundStrip</name>
        <param>
          <type>const LLA &amp;</type>
          <declname>aStartLLA</declname>
        </param>
        <param>
          <type>const LLA &amp;</type>
          <declname>anEndLLA</declname>
        </param>
        <param>
          <type>const Array&lt; Instant &gt; &amp;</type>
          <declname>anInstantArray</declname>
        </param>
        <param>
          <type>const Celestial &amp;</type>
          <declname>aCelestial</declname>
          <defval>Earth::WGS84()</defval>
        </param>
        <briefdescription>
<para>Constructs a trajectory for a given strip, assuming a constant ground speed and start instant. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting filename=".cpp"><codeline><highlight class="normal">LLA<sp/>startLLA<sp/>=<sp/>LLA::FromVector({<sp/>0.0,<sp/>0.0,<sp/>0.0<sp/>});</highlight></codeline>
<codeline><highlight class="normal">LLA<sp/>endLLA<sp/>=<sp/>LLA::FromVector({<sp/>1.0,<sp/>0.0,<sp/>0.0<sp/>});</highlight></codeline>
<codeline><highlight class="normal">Instant<sp/>startInstant<sp/>=<sp/>Instant::DateTime(DateTime::Parse(</highlight><highlight class="stringliteral">&quot;2020-01-01<sp/>00:00:00&quot;</highlight><highlight class="normal">),<sp/>Scale::UTC);</highlight></codeline>
<codeline><highlight class="normal">Instant<sp/>endInstant<sp/>=<sp/>Instant::DateTime(DateTime::Parse(</highlight><highlight class="stringliteral">&quot;2020-01-01<sp/>00:10:00&quot;</highlight><highlight class="normal">),<sp/>Scale::UTC);</highlight></codeline>
<codeline><highlight class="normal">Interval<sp/>interval<sp/>=<sp/>Interval::Closed(startInstant,<sp/>endInstant);</highlight></codeline>
<codeline><highlight class="normal">Array&lt;Instant&gt;<sp/>instants<sp/>=<sp/>interval.generateGrid(Duration::Seconds(1.0));</highlight></codeline>
<codeline><highlight class="normal">Earth<sp/>earth<sp/>=<sp/>Earth::WGS84();</highlight></codeline>
<codeline><highlight class="normal"><ref refid="classostk_1_1astrodynamics_1_1_trajectory_1a8eb87464a355610b52b9b2401a5ceb35" kindref="member">Trajectory</ref><sp/>trajectory<sp/>=<sp/><ref refid="classostk_1_1astrodynamics_1_1_trajectory_1a9775d82dfd4fe3148838d84371021117" kindref="member">Trajectory::GroundStrip</ref>(startLLA,<sp/>endLLA,<sp/>instants,<sp/>earth);</highlight></codeline>
</programlisting></para>
<para><xrefsect id="deprecated_1_deprecated000004"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use Trajectory(TargetScan(...)) instead. </para>
</xrefdescription></xrefsect><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aStartLLA</parametername>
</parameternamelist>
<parameterdescription>
<para>A start LLA </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>anEndLLA</parametername>
</parameternamelist>
<parameterdescription>
<para>An end LLA </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>anInstantArray</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of instants </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aCelestial</parametername>
</parameternamelist>
<parameterdescription>
<para>Celestial body </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>GroundStrip trajectory </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/Astrodynamics/Trajectory.hpp" line="235" column="23" bodyfile="src/OpenSpaceToolkit/Astrodynamics/Trajectory.cpp" bodystart="201" bodyend="247"/>
      </memberdef>
      <memberdef kind="function" id="classostk_1_1astrodynamics_1_1_trajectory_1a10709f1c1b56a4ab187cfcf41c03c3be" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classostk_1_1astrodynamics_1_1_trajectory" kindref="compound">Trajectory</ref></type>
        <definition>Trajectory ostk::astrodynamics::Trajectory::GroundStripGeodeticNadir</definition>
        <argsstring>(const trajectory::Orbit &amp;anOrbit, const Array&lt; Instant &gt; &amp;anInstantArray, const Celestial &amp;aCelestial=Earth::WGS84())</argsstring>
        <name>GroundStripGeodeticNadir</name>
        <param>
          <type>const <ref refid="classostk_1_1astrodynamics_1_1trajectory_1_1_orbit" kindref="compound">trajectory::Orbit</ref> &amp;</type>
          <declname>anOrbit</declname>
        </param>
        <param>
          <type>const Array&lt; Instant &gt; &amp;</type>
          <declname>anInstantArray</declname>
        </param>
        <param>
          <type>const Celestial &amp;</type>
          <declname>aCelestial</declname>
          <defval>Earth::WGS84()</defval>
        </param>
        <briefdescription>
<para>Constructs a trajectory representing a ground strip that follows the geodetic nadir of the provided orbit. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting filename=".cpp"><codeline><highlight class="normal">Instant<sp/>startInstant<sp/>=<sp/>Instant::DateTime(DateTime::Parse(</highlight><highlight class="stringliteral">&quot;2020-01-01<sp/>00:00:00&quot;</highlight><highlight class="normal">),<sp/>Scale::UTC);</highlight></codeline>
<codeline><highlight class="normal">Earth<sp/>earth<sp/>=<sp/>Earth::WGS84();</highlight></codeline>
<codeline><highlight class="normal"><ref refid="classostk_1_1astrodynamics_1_1_trajectory_1a8eb87464a355610b52b9b2401a5ceb35" kindref="member">Trajectory</ref><sp/>trajectory<sp/>=<sp/><ref refid="classostk_1_1astrodynamics_1_1_trajectory_1a10709f1c1b56a4ab187cfcf41c03c3be" kindref="member">Trajectory::GroundStripGeodeticNadir</ref>(anOrbit,<sp/>anInstantArray,<sp/>earth);</highlight></codeline>
</programlisting></para>
<para><xrefsect id="deprecated_1_deprecated000005"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use Trajectory(Nadir(...)) instead. </para>
</xrefdescription></xrefsect><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>anOrbit</parametername>
</parameternamelist>
<parameterdescription>
<para>An orbit </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>anInstantArray</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of instants </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aCelestial</parametername>
</parameternamelist>
<parameterdescription>
<para>Celestial body </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classostk_1_1astrodynamics_1_1_trajectory" kindref="compound">Trajectory</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/Astrodynamics/Trajectory.hpp" line="256" column="23" bodyfile="src/OpenSpaceToolkit/Astrodynamics/Trajectory.cpp" bodystart="249" bodyend="256"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classostk_1_1astrodynamics_1_1_trajectory_1a6c0103df039a8de9701125b235de1bff" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ostk::astrodynamics::Trajectory::Trajectory</definition>
        <argsstring>()</argsstring>
        <name>Trajectory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/Astrodynamics/Trajectory.hpp" line="265" column="5" bodyfile="src/OpenSpaceToolkit/Astrodynamics/Trajectory.cpp" bodystart="258" bodyend="261"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classostk_1_1astrodynamics_1_1_trajectory_1a03bd5289d382ee6e65f5aab855997b61" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Array&lt; <ref refid="classostk_1_1astrodynamics_1_1trajectory_1_1_state" kindref="compound">State</ref> &gt;</type>
        <definition>Array&lt; State &gt; ostk::astrodynamics::Trajectory::computeStates</definition>
        <argsstring>(const std::function&lt; physics::coordinate::Position(const Instant &amp;)&gt; &amp;aPositionGenerator, const Array&lt; Instant &gt; &amp;anInstantArray, const Duration &amp;aStepSize=Duration::Seconds(1e-2))</argsstring>
        <name>computeStates</name>
        <param>
          <type>const std::function&lt; physics::coordinate::Position(const Instant &amp;)&gt; &amp;</type>
          <declname>aPositionGenerator</declname>
        </param>
        <param>
          <type>const Array&lt; Instant &gt; &amp;</type>
          <declname>anInstantArray</declname>
        </param>
        <param>
          <type>const Duration &amp;</type>
          <declname>aStepSize</declname>
          <defval>Duration::Seconds(1e-2)</defval>
        </param>
        <briefdescription>
<para>Compute states using the provided position generator, and finite differenced velocities, at the provided instants. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aPositionGenerator</parametername>
</parameternamelist>
<parameterdescription>
<para>A position generator </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>anInstantArray</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of instants </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aStepSize</parametername>
</parameternamelist>
<parameterdescription>
<para>A step size </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Array of states </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/OpenSpaceToolkit/Astrodynamics/Trajectory.hpp" line="274" column="18" bodyfile="src/OpenSpaceToolkit/Astrodynamics/Trajectory.cpp" bodystart="263" bodyend="313"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Path followed by an object through space as a function of time. </para>
    </briefdescription>
    <detaileddescription>
<para><ulink url="https://en.wikipedia.org/wiki/Trajectory">https://en.wikipedia.org/wiki/Trajectory</ulink> </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>ostk::astrodynamics::Trajectory</label>
        <link refid="classostk_1_1astrodynamics_1_1_trajectory"/>
      </node>
      <node id="2">
        <label>ostk::astrodynamics::trajectory::Orbit</label>
        <link refid="classostk_1_1astrodynamics_1_1trajectory_1_1_orbit"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="include/OpenSpaceToolkit/Astrodynamics/Trajectory.hpp" line="55" column="1" bodyfile="include/OpenSpaceToolkit/Astrodynamics/Trajectory.hpp" bodystart="54" bodyend="279"/>
    <listofallmembers>
      <member refid="classostk_1_1astrodynamics_1_1_trajectory_1a00e0200bc70fc7c5c764b2204f3232f8" prot="public" virt="non-virtual"><scope>ostk::astrodynamics::Trajectory</scope><name>accessModel</name></member>
      <member refid="classostk_1_1astrodynamics_1_1_trajectory_1a03bd5289d382ee6e65f5aab855997b61" prot="private" virt="non-virtual"><scope>ostk::astrodynamics::Trajectory</scope><name>computeStates</name></member>
      <member refid="classostk_1_1astrodynamics_1_1_trajectory_1ab72172193ac72db5b7acf922d1b0a9b7" prot="public" virt="non-virtual"><scope>ostk::astrodynamics::Trajectory</scope><name>getStateAt</name></member>
      <member refid="classostk_1_1astrodynamics_1_1_trajectory_1a828ef112e449b697c961e61825b48cbc" prot="public" virt="non-virtual"><scope>ostk::astrodynamics::Trajectory</scope><name>getStatesAt</name></member>
      <member refid="classostk_1_1astrodynamics_1_1_trajectory_1a9775d82dfd4fe3148838d84371021117" prot="public" virt="non-virtual"><scope>ostk::astrodynamics::Trajectory</scope><name>GroundStrip</name></member>
      <member refid="classostk_1_1astrodynamics_1_1_trajectory_1ae0657f4bca61121f64aa8d66643afccd" prot="public" virt="non-virtual"><scope>ostk::astrodynamics::Trajectory</scope><name>GroundStrip</name></member>
      <member refid="classostk_1_1astrodynamics_1_1_trajectory_1a10709f1c1b56a4ab187cfcf41c03c3be" prot="public" virt="non-virtual"><scope>ostk::astrodynamics::Trajectory</scope><name>GroundStripGeodeticNadir</name></member>
      <member refid="classostk_1_1astrodynamics_1_1_trajectory_1a6f0f0e6fb825b858c86ffe9d9071fdbd" prot="public" virt="non-virtual"><scope>ostk::astrodynamics::Trajectory</scope><name>isDefined</name></member>
      <member refid="classostk_1_1astrodynamics_1_1_trajectory_1afb4157336944088c5cf9e1080cce04b0" prot="private" virt="non-virtual"><scope>ostk::astrodynamics::Trajectory</scope><name>modelUPtr_</name></member>
      <member refid="classostk_1_1astrodynamics_1_1_trajectory_1aa46d34603ab19531c6b6dfde9b394e85" prot="public" virt="non-virtual"><scope>ostk::astrodynamics::Trajectory</scope><name>operator!=</name></member>
      <member refid="classostk_1_1astrodynamics_1_1_trajectory_1aef0327f0240dc2d71eca34dc287f88ea" prot="public" virt="non-virtual"><scope>ostk::astrodynamics::Trajectory</scope><name>operator&lt;&lt;</name></member>
      <member refid="classostk_1_1astrodynamics_1_1_trajectory_1ad98dea12af414af8162b085cdd5dd511" prot="public" virt="non-virtual"><scope>ostk::astrodynamics::Trajectory</scope><name>operator=</name></member>
      <member refid="classostk_1_1astrodynamics_1_1_trajectory_1aab7ed9137581cdc28ce569f8165c1e60" prot="public" virt="non-virtual"><scope>ostk::astrodynamics::Trajectory</scope><name>operator==</name></member>
      <member refid="classostk_1_1astrodynamics_1_1_trajectory_1a7c3e5cb45279eb2d7cbf32c2347d3840" prot="public" virt="non-virtual"><scope>ostk::astrodynamics::Trajectory</scope><name>Position</name></member>
      <member refid="classostk_1_1astrodynamics_1_1_trajectory_1a5621f3ab62b023cd125505adda04e70a" prot="public" virt="virtual"><scope>ostk::astrodynamics::Trajectory</scope><name>print</name></member>
      <member refid="classostk_1_1astrodynamics_1_1_trajectory_1a8eb87464a355610b52b9b2401a5ceb35" prot="public" virt="non-virtual"><scope>ostk::astrodynamics::Trajectory</scope><name>Trajectory</name></member>
      <member refid="classostk_1_1astrodynamics_1_1_trajectory_1a333aa41110b47e8c69a97aae3669032c" prot="public" virt="non-virtual"><scope>ostk::astrodynamics::Trajectory</scope><name>Trajectory</name></member>
      <member refid="classostk_1_1astrodynamics_1_1_trajectory_1adc2a737f516231faa65684ab6232dc7e" prot="public" virt="non-virtual"><scope>ostk::astrodynamics::Trajectory</scope><name>Trajectory</name></member>
      <member refid="classostk_1_1astrodynamics_1_1_trajectory_1a6c0103df039a8de9701125b235de1bff" prot="private" virt="non-virtual"><scope>ostk::astrodynamics::Trajectory</scope><name>Trajectory</name></member>
      <member refid="classostk_1_1astrodynamics_1_1_trajectory_1a5cd4a31ab2f9e4b4ca5dd62c515490ef" prot="public" virt="non-virtual"><scope>ostk::astrodynamics::Trajectory</scope><name>Undefined</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
