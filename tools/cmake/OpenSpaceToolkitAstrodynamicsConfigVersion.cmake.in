# Apache License 2.0 

SET (PACKAGE_VERSION "@PROJECT_VERSION@")
SET (PACKAGE_VERSION_MAJOR "@PROJECT_VERSION_MAJOR@")
SET (PACKAGE_VERSION_MINOR "@PROJECT_VERSION_MINOR@")
SET (PACKAGE_VERSION_PATCH "@PROJECT_VERSION_PATCH@")

IF (NOT PACKAGE_FIND_NAME STREQUAL "@PROJECT_NAME@")

	# Check package name (in particular, because of the way cmake finds
	# package config files, the capitalization could easily be "wrong").
	# This is necessary to ensure that the automatically generated
	# variables, e.g., <package>_FOUND, are consistently spelled.

	SET (REASON "package = @PROJECT_NAME@, NOT ${PACKAGE_FIND_NAME}")
	SET (PACKAGE_VERSION_UNSUITABLE TRUE)

ELSEIF (NOT (APPLE OR (NOT DEFINED CMAKE_SIZEOF_VOID_P) OR CMAKE_SIZEOF_VOID_P EQUAL @CMAKE_SIZEOF_VOID_P@))

	# Reject if there's a 32-bit/64-bit mismatch (not necessary with Apple
	# since a multi-architecture library is built for that platform).

	SET (REASON "sizeof(*void) = @CMAKE_SIZEOF_VOID_P@")
	SET (PACKAGE_VERSION_UNSUITABLE TRUE)

ELSEIF (MSVC AND NOT MSVC_VERSION STREQUAL "@MSVC_VERSION@")

	# Reject if there's a mismatch in MSVC compiler versions

	SET (REASON "_MSC_VER = @MSVC_VERSION@")
	SET (PACKAGE_VERSION_UNSUITABLE TRUE)

ELSEIF (NOT CMAKE_CROSSCOMPILING STREQUAL "@CMAKE_CROSSCOMPILING@")

	# Reject if there's a mismatch in ${CMAKE_CROSSCOMPILING}

	SET (REASON "cross-compiling = @CMAKE_CROSSCOMPILING@")
	SET (PACKAGE_VERSION_UNSUITABLE TRUE)

ELSEIF (CMAKE_CROSSCOMPILING AND NOT (CMAKE_SYSTEM_NAME STREQUAL "@CMAKE_SYSTEM_NAME@" AND CMAKE_SYSTEM_PROCESSOR STREQUAL "@CMAKE_SYSTEM_PROCESSOR@"))

	# Reject if cross-compiling and there's a mismatch in the target system

	SET (REASON "target = @CMAKE_SYSTEM_NAME@-@CMAKE_SYSTEM_PROCESSOR@")
	SET (PACKAGE_VERSION_UNSUITABLE TRUE)

ELSEIF (PACKAGE_FIND_VERSION)

	IF (PACKAGE_FIND_VERSION VERSION_EQUAL PACKAGE_VERSION)

		SET (PACKAGE_VERSION_EXACT TRUE)

	ELSEIF (PACKAGE_FIND_VERSION VERSION_LESS PACKAGE_VERSION AND PACKAGE_FIND_VERSION_MAJOR EQUAL PACKAGE_VERSION_MAJOR)

		SET (PACKAGE_VERSION_COMPATIBLE TRUE)

	ENDIF ()

ENDIF ()

# If unsuitable, append the reason to the package version so that it's visible to the user.

IF (PACKAGE_VERSION_UNSUITABLE)

	SET (PACKAGE_VERSION "${PACKAGE_VERSION} (${REASON})")

ENDIF ()
