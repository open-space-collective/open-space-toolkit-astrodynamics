////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/// @project        Open Space Toolkit ▸ Astrodynamics
/// @file           OpenSpaceToolkit/Astrodynamics/Trajectory/AbstractState.hpp
/// @author         Lucas Brémond <lucas@loftorbital.com>
/// @license        Apache License 2.0

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef __OpenSpaceToolkit_Astrodynamics_Trajectory_AbstractState__
#define __OpenSpaceToolkit_Astrodynamics_Trajectory_AbstractState__

#include <OpenSpaceToolkit/Physics/Time/Instant.hpp>

#include <OpenSpaceToolkit/Core/Types/Shared.hpp>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace ostk
{
namespace astro
{
namespace trajectory
{

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

using ostk::core::types::Shared ;
using ostk::physics::time::Instant ;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/// @brief                      Trajectory abstract state

class AbstractState
{

    public:

                                AbstractState                               (   const   Instant&                    anInstant,
                                                                                const   std::vector<double>&        aVector                                     ) ;  // TBI: naming and type

        bool                    isDefined                                   ( ) const ;

        const Instant&          accessInstant                               ( ) const ;

        const std::vector<double>&  accessCoordinates                       ( ) const ;

        Instant                 getInstant                                  ( ) const ;

        std::vector<double>     getCoordinates                              ( ) const ;

    private:

        Instant                 instant_ ;
        std::vector<double>     coordinates_ ;

} ;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}
}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#endif

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
